/*
-----------------------------------------------------------------------------
Filename:    GASRendering.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "GASRendering.h"

//-------------------------------------------------------------------------------------
GASRendering::GASRendering(void)
	:mSpeak1MovingLeft(false)
	,mSpeak1MovingFwd(false)
	,mSpeak1MovingRight(false)
	,mSpeak1MovingBack(false)
{
}
//-------------------------------------------------------------------------------------
GASRendering::~GASRendering(void)
{
}

//-------------------------------------------------------------------------------------
void GASRendering::createScene(void)
{
    /*Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");

    Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    headNode->attachObject(ogreHead);
*/
	Ogre::Plane plane(Ogre::Vector3::UNIT_Y, 0);
	Ogre::MeshManager::getSingleton().createPlane("Floor", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		plane, 1000, 1000, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);
	
	Ogre::Entity *planeEnt = mSceneMgr->createEntity("FloorEntity","Floor");

	Ogre::SceneNode* node = mSceneMgr->createSceneNode("Floor");
	mSceneMgr->getRootSceneNode()->addChild(node);
	node->attachObject(planeEnt);
	planeEnt->setMaterialName("Examples/Rockwall");
    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);

	mSpeaker1Node = mSceneMgr->createSceneNode("Speaker1");
	mSceneMgr->getRootSceneNode()->addChild(mSpeaker1Node);
	Ogre::Entity* model = mSceneMgr->createEntity("Speaker1_ent","cube.mesh");
	mSpeaker1Node->attachObject(model);

	new GAS::GameAudioWrapper();
	
		unsigned int id = GAS::GameAudioWrapper::getSingleton().CreateSource(std::string("Media/sounds/Bomb"), std::string("ogg"));
//	GAS::GameAudioWrapper::getSingleton().Play(id);
	unsigned int id2 = GAS::GameAudioWrapper::getSingleton().CreateSource(std::string("Media/sounds/provay"), std::string("ogg"));
	GAS::GameAudioWrapper::getSingleton().Play(id);

	mSpeaker1 = new GAS::GameAudioObject(mSpeaker1Node, id);

}

// OIS::KeyListener
bool GASRendering::keyPressed( const OIS::KeyEvent &arg )
{
	BaseApplication::keyPressed(arg);

	if (arg.key == OIS::KC_J)
    {
		mSpeak1MovingLeft = true;
		
    }else if (arg.key == OIS::KC_L)
    {
		mSpeak1MovingRight = true;
		
    }else if (arg.key == OIS::KC_I)   
    {
		mSpeak1MovingFwd = true;
	}else if (arg.key == OIS::KC_K)   
    {
		mSpeak1MovingBack = true;
    }

	return true;
}
bool GASRendering::keyReleased( const OIS::KeyEvent &arg )
{
	BaseApplication::keyReleased(arg);

	

	if (arg.key == OIS::KC_J)
    {
		mSpeak1MovingLeft = false;
		
    }else if (arg.key == OIS::KC_L)
    {
		mSpeak1MovingRight = false;
		
    }else if (arg.key == OIS::KC_I)   
    {
		mSpeak1MovingFwd = false;
	}else if (arg.key == OIS::KC_K)   
    {
		mSpeak1MovingBack = false;
    }

	
	return true;
}

//-------------------------------------------------------------------------------------
bool GASRendering::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
    if(mWindow->isClosed())
        return false;

    if(mShutDown)
        return false;
    //Need to capture/update each device
    mKeyboard->capture();
    mMouse->capture();

	Ogre::Vector3 traslation(0.0f,0.0f,0.0f);
	float delta = 50.0f;
	bool modified = false;
	
	if (mSpeak1MovingBack)
	{
		traslation += Ogre::Vector3::UNIT_Z * delta * evt.timeSinceLastFrame;
		modified = true;
	}
    if (mSpeak1MovingFwd)
	{
		traslation += -Ogre::Vector3::UNIT_Z * delta * evt.timeSinceLastFrame;
		modified = true;
	}
    if (mSpeak1MovingLeft)
	{
		traslation += -Ogre::Vector3::UNIT_X * delta * evt.timeSinceLastFrame;
		modified = true;
	}
    if (mSpeak1MovingRight)
	{
		traslation += Ogre::Vector3::UNIT_X * delta * evt.timeSinceLastFrame;
		modified = true;
	}
    
	if (modified)
		mSpeaker1Node->translate(traslation);

	mTrayMgr->frameRenderingQueued(evt);

    if (!mTrayMgr->isDialogVisible())
    {
        mCameraMan->frameRenderingQueued(evt);   // if dialog isn't up, then update the camera
        if (mDetailsPanel->isVisible())   // if details panel is visible, then update its contents
        {
            mDetailsPanel->setParamValue(0, Ogre::StringConverter::toString(mCamera->getDerivedPosition().x));
            mDetailsPanel->setParamValue(1, Ogre::StringConverter::toString(mCamera->getDerivedPosition().y));
            mDetailsPanel->setParamValue(2, Ogre::StringConverter::toString(mCamera->getDerivedPosition().z));
            mDetailsPanel->setParamValue(4, Ogre::StringConverter::toString(mCamera->getDerivedOrientation().w));
            mDetailsPanel->setParamValue(5, Ogre::StringConverter::toString(mCamera->getDerivedOrientation().x));
            mDetailsPanel->setParamValue(6, Ogre::StringConverter::toString(mCamera->getDerivedOrientation().y));
            mDetailsPanel->setParamValue(7, Ogre::StringConverter::toString(mCamera->getDerivedOrientation().z));
        }
    }

    return true;
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        GASRendering app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
