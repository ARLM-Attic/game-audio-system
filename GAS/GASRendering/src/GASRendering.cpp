/*
-----------------------------------------------------------------------------
Filename:    GASRendering.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "GASRendering.h"

//-------------------------------------------------------------------------------------
GASRendering::GASRendering(void)
{
}
//-------------------------------------------------------------------------------------
GASRendering::~GASRendering(void)
{
}

//-------------------------------------------------------------------------------------
void GASRendering::createScene(void)
{
    /*Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");

    Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    headNode->attachObject(ogreHead);
*/
	Ogre::Plane plane(Ogre::Vector3::UNIT_Y, 0);
	Ogre::MeshManager::getSingleton().createPlane("Floor", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		plane, 1000, 1000, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);
	
	Ogre::Entity *planeEnt = mSceneMgr->createEntity("FloorEntity","Floor");

	Ogre::SceneNode* node = mSceneMgr->createSceneNode("Floor");
	mSceneMgr->getRootSceneNode()->addChild(node);
	node->attachObject(planeEnt);
	planeEnt->setMaterialName("Examples/Rockwall");
    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);

	Ogre::SceneNode* speaker1Node = mSceneMgr->createSceneNode("Speaker1");
	mSceneMgr->getRootSceneNode()->addChild(speaker1Node);
	Ogre::Entity* model = mSceneMgr->createEntity("Speaker1_ent","cube.mesh");
	speaker1Node->attachObject(model);


		unsigned int id = mAudioWrapper.CreateSource(std::string("Media/sounds/Bomb"), std::string("ogg"));
	mAudioWrapper.Play(id);
	unsigned int id2 = mAudioWrapper.CreateSource(std::string("Media/sounds/provay"), std::string("ogg"));
	mAudioWrapper.Play(id2);

}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        GASRendering app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
